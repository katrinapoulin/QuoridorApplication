namespace ca.mcgill.ecse223.quoridor.controller;

use QuoridorGame.ump;


 
class PawnBehavior {

depend java.util.ArrayList;
depend java.util.List;

    0..1 -> 0..1 Game currentGame;
    0..1 -> 0..1 Player player;
	
    pawnSM {
	    MyMove
	    {  
	      clickPawn -> PawnInHand;
		}
	    
	    PawnInHand
	    {
			      illegalMove -> MyMove;
			      cancelPawnMove -> MyMove;
	      
	      stepPawnEast()[isLegalStep(MoveDirection.East)] -> /{stepPawn(MoveDirection.East);} MyMove;
	      jumpPawnEast()[isLegalJump(MoveDirection.East)] -> /{jumpPawn(MoveDirection.East);} MyMove;
	      jumpPawnEastNorth()[isLegalJump(MoveDirection.East, MoveDirection.North)] -> /{jumpPawn(MoveDirection.East, MoveDirection.North);} MyMove;
	      jumpPawnEastSouth()[isLegalJump(MoveDirection.East, MoveDirection.South)] -> /{jumpPawn(MoveDirection.East, MoveDirection.South);} MyMove;
	     	
	      stepPawnWest()[isLegalStep(MoveDirection.West)] -> /{stepPawn(MoveDirection.West);} MyMove;
	      jumpPawnWest()[isLegalJump(MoveDirection.West)] -> /{jumpPawn(MoveDirection.West);} MyMove;
	      jumpPawnWestNorth()[isLegalJump(MoveDirection.West, MoveDirection.North)] -> /{jumpPawn(MoveDirection.West, MoveDirection.North);} MyMove;
	      jumpPawnWestSouth()[isLegalJump(MoveDirection.West, MoveDirection.South)] -> /{jumpPawn(MoveDirection.West, MoveDirection.South);} MyMove;
	      
	      
	      stepPawnNorth()[isLegalStep(MoveDirection.North)] -> /{stepPawn(MoveDirection.North);} MyMove;
	      jumpPawnNorth()[isLegalJump(MoveDirection.North)] -> /{jumpPawn(MoveDirection.North);}MyMove;
	      jumpPawnNorthEast()[isLegalJump(MoveDirection.North, MoveDirection.East)] -> /{jumpPawn(MoveDirection.North, MoveDirection.East);} MyMove;
	      jumpPawnNorthWest()[isLegalJump(MoveDirection.North, MoveDirection.West)] -> /{jumpPawn(MoveDirection.North, MoveDirection.West);} MyMove;
	      
	      
	      stepPawnSouth()[isLegalStep(MoveDirection.South)] -> /{stepPawn(MoveDirection.South);} MyMove;
	      jumpPawnSouth()[isLegalJump(MoveDirection.South)] -> /{jumpPawn(MoveDirection.South);}MyMove;
	      jumpPawnSouthEast()[isLegalJump(MoveDirection.South, MoveDirection.East)] -> /{jumpPawn(MoveDirection.South, MoveDirection.East);} MyMove;
	      jumpPawnSouthWest()[isLegalJump(MoveDirection.South, MoveDirection.West)] -> /{jumpPawn(MoveDirection.South, MoveDirection.West);} MyMove;
	    
	    }
	
	        
	    
    }

    // Returns the current row number of the pawn
    int getCurrentPawnRow() { 
	    int row;
		if(currentGame.getCurrentPosition().getPlayerToMove().hasGameAsWhite() == true) {
			row = currentGame.getCurrentPosition().getWhitePosition().getTile().getRow();
		} else {
			row = currentGame.getCurrentPosition().getBlackPosition().getTile().getRow();
		}
	    return row;
    
    }
    // Returns the current column number of the pawn
    int getCurrentPawnColumn() { 
    	int col;
		if(currentGame.getCurrentPosition().getPlayerToMove().hasGameAsWhite() == true) {
			col = currentGame.getCurrentPosition().getWhitePosition().getTile().getColumn();
		} else {
			col = currentGame.getCurrentPosition().getBlackPosition().getTile().getColumn();
		}
	    return col;
    }
    
    ArrayList<Wall> getWalls() {
	  List<Wall> whiteWalls = currentGame.getCurrentPosition().getWhiteWallsOnBoard(); //get all the white walls
		ArrayList<Wall> walls = new ArrayList<Wall>();
		List<Wall> blackWalls = currentGame.getCurrentPosition().getBlackWallsOnBoard(); //add all the black walls

		for(Wall wall : whiteWalls) {
			walls.add(wall);
		}
		
		
		for(Wall wall : blackWalls) {
			walls.add(wall);
		}
		
		return walls;
  }
    
    
    
    public boolean isLegalStep(MoveDirection dir){
    int rowToCheck = getCurrentPawnRow();
		int colToCheck = getCurrentPawnColumn();
		int tileIndex;
		Tile tile;
		
		
		if(dir == null) {
			return false;
		}
		
		if(dir == MoveDirection.East) {
			colToCheck++;
		}
		if(dir == MoveDirection.West) {
			colToCheck--;
		}
		if(dir == MoveDirection.North) {
			rowToCheck--;
		}
		if(dir == MoveDirection.South) {
			rowToCheck++;
		}
		
		if(colToCheck > 9 || colToCheck < 1 || rowToCheck < 1 || rowToCheck>9) { //outofbounds verify with katrina
			return false;
		}
		
		if(currentGame.getCurrentPosition().getPlayerToMove().hasGameAsWhite() == true) {
			if(currentGame.getCurrentPosition().getBlackPosition().getTile().getColumn() == colToCheck && 
					currentGame.getCurrentPosition().getBlackPosition().getTile().getRow() == rowToCheck) {
				return false;
			}
		} else {
			if(currentGame.getCurrentPosition().getWhitePosition().getTile().getColumn() == colToCheck && 
					currentGame.getCurrentPosition().getWhitePosition().getTile().getRow() == rowToCheck) {
				return false;
			}	
		}
		
		ArrayList<Wall> walls = getWalls();
		rowToCheck = getCurrentPawnRow();
		colToCheck = getCurrentPawnColumn();
		
		int rowToCheck2 = getCurrentPawnRow();
		int colToCheck2 = getCurrentPawnColumn();
		
		if(dir == MoveDirection.East) {
			colToCheck++;
			rowToCheck2++;
			colToCheck2++;
		}
		if(dir == MoveDirection.West) {
			rowToCheck2++;
		}
		if(dir == MoveDirection.North) {
			colToCheck2++;
		}
		if(dir == MoveDirection.South) {
			rowToCheck++;
			rowToCheck2++;
			colToCheck2++;
		}
		
		for(Wall wall: walls) {
			if(dir == MoveDirection.North || dir == MoveDirection.South) {
				if(wall.getMove().getWallDirection() == Direction.Horizontal) {
				if((wall.getMove().getTargetTile().getRow() == rowToCheck && wall.getMove().getTargetTile().getColumn() == colToCheck) ||
				(wall.getMove().getTargetTile().getRow() == rowToCheck2 && wall.getMove().getTargetTile().getColumn() == colToCheck2)) {
				return false;
				}		
			} 
			} else { //east or west
				if(wall.getMove().getWallDirection() == Direction.Vertical) {
					if((wall.getMove().getTargetTile().getRow() == rowToCheck && wall.getMove().getTargetTile().getColumn() == colToCheck) ||
					(wall.getMove().getTargetTile().getRow() == rowToCheck2 && wall.getMove().getTargetTile().getColumn() == colToCheck2)) {
					return false;
					}
				}
			}
			
		}
		return true;
  }


  /**
   * Returns if it is legal to jump in the given direction
   */
  // line 169 "../../../../../PawnStateMachine.ump"
 public boolean isLegalJump(MoveDirection dir){
    int rowToCheck = getCurrentPawnRow();
	  int colToCheck = getCurrentPawnColumn();
	  int tileIndex;
	  Tile tile;
	  boolean resume = false;
		
		if(dir == null) {
			return false;
		}
		
		int rowToCheck2 = getCurrentPawnRow();
		int colToCheck2 = getCurrentPawnColumn();
		ArrayList<Wall> walls = getWalls();
		
		
		if(dir == MoveDirection.East) {
			colToCheck++;
			rowToCheck2++;
			colToCheck2++;
		}
		if(dir == MoveDirection.West) {
			rowToCheck2++;
		}
		if(dir == MoveDirection.North) {
			colToCheck2++;
		}
		if(dir == MoveDirection.South) {
			rowToCheck++;
			rowToCheck2++;
			colToCheck2++;
		}
		
		if(colToCheck > 9 || colToCheck < 1 || rowToCheck < 1 || rowToCheck>9) { //outofbounds verify with katrina
			return false;
		}
		if(colToCheck2 > 9 || colToCheck2 < 1 || rowToCheck2 < 1 || rowToCheck2>9) { //outofbounds verify with katrina
			return false;
		}
		for(Wall wall: walls) {
			if(dir == MoveDirection.North || dir == MoveDirection.South) {
				if(wall.getMove().getWallDirection() == Direction.Horizontal) {
				if((wall.getMove().getTargetTile().getRow() == rowToCheck && wall.getMove().getTargetTile().getColumn() == colToCheck) ||
				(wall.getMove().getTargetTile().getRow() == rowToCheck2 && wall.getMove().getTargetTile().getColumn() == colToCheck2)) {
				return false;
				}		
			} 
			} else { //east or west
				if(wall.getMove().getWallDirection() == Direction.Vertical) {
					if((wall.getMove().getTargetTile().getRow() == rowToCheck && wall.getMove().getTargetTile().getColumn() == colToCheck) ||
					(wall.getMove().getTargetTile().getRow() == rowToCheck2 && wall.getMove().getTargetTile().getColumn() == colToCheck2)) {
					return false;
					}
				}
			}
			
		}
		
		
		rowToCheck = getCurrentPawnRow();
	  	colToCheck = getCurrentPawnColumn();
	  	
		if(dir == MoveDirection.East) {
			colToCheck++;
		}
		if(dir == MoveDirection.West) {
			colToCheck--;
		}
		if(dir == MoveDirection.North) {
			rowToCheck--;
		}
		if(dir == MoveDirection.South) {
			rowToCheck++;
		}
		
		if(colToCheck > 9 || colToCheck < 1 || rowToCheck < 1 || rowToCheck>9) { //outofbounds verify with katrina
			return false;
		}
		
		if(currentGame.getCurrentPosition().getPlayerToMove().hasGameAsWhite() == true) {
			if(currentGame.getCurrentPosition().getBlackPosition().getTile().getColumn() == colToCheck && 
					currentGame.getCurrentPosition().getBlackPosition().getTile().getRow() == rowToCheck) {
				resume = true;
			}
		} else {
			if(currentGame.getCurrentPosition().getWhitePosition().getTile().getColumn() == colToCheck && 
					currentGame.getCurrentPosition().getWhitePosition().getTile().getRow() == rowToCheck) {
				resume = true;
			}	
		}
		
		if(resume == false) {
			return false;
		}
		
		
		rowToCheck2 = rowToCheck;
		colToCheck2 = colToCheck;
		
		if(dir == MoveDirection.East) {
			colToCheck++;
			rowToCheck2++;
			colToCheck2++;
		}
		if(dir == MoveDirection.West) {
			rowToCheck2++;
		}
		if(dir == MoveDirection.North) {
			colToCheck2++;
		}
		if(dir == MoveDirection.South) {
			rowToCheck++;
			rowToCheck2++;
			colToCheck2++;
		}
		
		for(Wall wall: walls) {
			if(dir == MoveDirection.North || dir == MoveDirection.South) {
				if(wall.getMove().getWallDirection() == Direction.Horizontal) 	{
				if((wall.getMove().getTargetTile().getRow() == rowToCheck && wall.getMove().getTargetTile().getColumn() == colToCheck) ||
				(wall.getMove().getTargetTile().getRow() == rowToCheck2 && wall.getMove().getTargetTile().getColumn() == colToCheck2)) {
				return false;
				}		
			} 
			} else { //east or west
				if(wall.getMove().getWallDirection() == Direction.Vertical) {
					if((wall.getMove().getTargetTile().getRow() == rowToCheck && wall.getMove().getTargetTile().getColumn() == colToCheck) ||
					(wall.getMove().getTargetTile().getRow() == rowToCheck2 && wall.getMove().getTargetTile().getColumn() == colToCheck2)) {
					return false;
					}
				}
			}
			
		}
		
		rowToCheck = getCurrentPawnRow();
		colToCheck = getCurrentPawnColumn();
		
		if(dir == MoveDirection.East) {
			colToCheck+=2;
		}
		if(dir == MoveDirection.West) {
			colToCheck-=2;
		}
		if(dir == MoveDirection.North) {
			rowToCheck-=2;
		}
		if(dir == MoveDirection.South) {
			rowToCheck+=2;
		}
		
		if(colToCheck > 9 || colToCheck < 1 || rowToCheck < 1 || rowToCheck>9) { //outofbounds verify with katrina
			return false;
		}
		//checking for out of bounds
		
		return true;
  }


  /**
   * line 242 "../../../../../PawnStateMachine.ump"
   */
  // line 276 "../../../../../PawnStateMachine.ump"
   public boolean isLegalJump(MoveDirection dir, MoveDirection dir2){
    int rowToCheck = getCurrentPawnRow();
		  int colToCheck = getCurrentPawnColumn();
		  int tileIndex;
		  Tile tile;
		  boolean resume = false;
			
		int rowToCheck2 = getCurrentPawnRow();
		int colToCheck2 = getCurrentPawnColumn();
		ArrayList<Wall> walls = getWalls();
		
		
		if(dir == MoveDirection.East) {
			colToCheck++;
			rowToCheck2++;
			colToCheck2++;
		}
		if(dir == MoveDirection.West) {
			rowToCheck2++;
		}
		if(dir == MoveDirection.North) {
			colToCheck2++;
		}
		if(dir == MoveDirection.South) {
			rowToCheck++;
			rowToCheck2++;
			colToCheck2++;
		}
		
		if(colToCheck > 9 || colToCheck < 1 || rowToCheck < 1 || rowToCheck>9) { //outofbounds verify with katrina
			return false;
		}
		if(colToCheck2 > 9 || colToCheck2 < 1 || rowToCheck2 < 1 || rowToCheck2>9) { //outofbounds verify with katrina
			return false;
		}
		for(Wall wall: walls) {
			if(dir == MoveDirection.North || dir == MoveDirection.South) {
				if(wall.getMove().getWallDirection() == Direction.Horizontal) {
				if((wall.getMove().getTargetTile().getRow() == rowToCheck && wall.getMove().getTargetTile().getColumn() == colToCheck) ||
				(wall.getMove().getTargetTile().getRow() == rowToCheck2 && wall.getMove().getTargetTile().getColumn() == colToCheck2)) {
				return false;
				}		
			} 
			} else { //east or west
				if(wall.getMove().getWallDirection() == Direction.Vertical) {
					if((wall.getMove().getTargetTile().getRow() == rowToCheck && wall.getMove().getTargetTile().getColumn() == colToCheck) ||
					(wall.getMove().getTargetTile().getRow() == rowToCheck2 && wall.getMove().getTargetTile().getColumn() == colToCheck2)) {
					return false;
					}
				}
			}
			
		}
			
			
			
			
			rowToCheck = getCurrentPawnRow();
		  colToCheck = getCurrentPawnColumn();
			
			
			
			
			if(dir == null) {
				return false;
			}
			
			if(dir == MoveDirection.East) {
				colToCheck++;
			}
			if(dir == MoveDirection.West) {
				colToCheck--;
			}
			if(dir == MoveDirection.North) {
				rowToCheck--;
			}
			if(dir == MoveDirection.South) {
				rowToCheck++;
			}
			
			if(currentGame.getCurrentPosition().getPlayerToMove().hasGameAsWhite() == true) {
				if(currentGame.getCurrentPosition().getBlackPosition().getTile().getColumn() == colToCheck && 
						currentGame.getCurrentPosition().getBlackPosition().getTile().getRow() == rowToCheck) {
					resume = true;
				}
			} else {
				if(currentGame.getCurrentPosition().getWhitePosition().getTile().getColumn() == colToCheck && 
						currentGame.getCurrentPosition().getWhitePosition().getTile().getRow() == rowToCheck) {
					resume = true;
				}	
			}
			
			if(resume == false) {
			return resume;
			}
			//resume is true
			
			
			
			
			
			
			
			if(isLegalJump(dir)) {//it's legal to just jump in that direction
				return false; //why are you jumping in two directions
			}
			
			// it's illegal to just jump east: factor in second direction
			rowToCheck2 = rowToCheck;
			colToCheck2 = colToCheck;
			
			if(dir2 == MoveDirection.East) {
				colToCheck++;
				rowToCheck2++;
				colToCheck2++;
			}
			if(dir2 == MoveDirection.West) {
				rowToCheck2++;
			}
			if(dir2 == MoveDirection.North) {
				colToCheck2++;
			}
			if(dir2 == MoveDirection.South) {
				rowToCheck++;
				rowToCheck2++;
				colToCheck2++;
			}
			
			for(Wall wall: walls) {
				if(dir2 == MoveDirection.North || dir2 == MoveDirection.South) {
					if(wall.getMove().getWallDirection() == Direction.Horizontal) {
					if((wall.getMove().getTargetTile().getRow() == rowToCheck && wall.getMove().getTargetTile().getColumn() == colToCheck) ||
					(wall.getMove().getTargetTile().getRow() == rowToCheck2 && wall.getMove().getTargetTile().getColumn() == colToCheck2)) {
					return false;
					}		
				} 
				} else { //east or west
					if(wall.getMove().getWallDirection() == Direction.Vertical) {
						if((wall.getMove().getTargetTile().getRow() == rowToCheck && wall.getMove().getTargetTile().getColumn() == colToCheck) ||
						(wall.getMove().getTargetTile().getRow() == rowToCheck2 && wall.getMove().getTargetTile().getColumn() == colToCheck2)) {
						return false;
						}
					}
				}
				
			}
			
			rowToCheck = getCurrentPawnRow();
			colToCheck = getCurrentPawnColumn();
			
			if(dir == MoveDirection.East) {
				colToCheck++;
			}
			if(dir == MoveDirection.West) {
				colToCheck--;
			}
			if(dir == MoveDirection.North) {
				rowToCheck--;
			}
			if(dir == MoveDirection.South) {
				rowToCheck++;
			}
			
			if(dir2 == MoveDirection.East) {
				colToCheck++;
			}
			if(dir2 == MoveDirection.West) {
				colToCheck--;
			}
			if(dir2 == MoveDirection.North) {
				rowToCheck--;
			}
			if(dir2 == MoveDirection.South) {
				rowToCheck++;
			}
			
			if(colToCheck > 9 || colToCheck < 1 || rowToCheck < 1 || rowToCheck>9) { //outofbounds verify with katrina
				return false;
			}
			
			return true;
  }

  
  	private void stepPawn(MoveDirection dir) {
		QuoridorGameController.stepPawn(dir);
	}
  	
  	private void jumpPawn(MoveDirection dir) {
  		QuoridorGameController.jumpPawn(dir);
  	}
  	private void jumpPawn(MoveDirection dir, MoveDirection dir2) {
  		QuoridorGameController.jumpPawn(dir, dir2);
  	}

    
    // Enumeration for the possible moving directions
    // (directions are from the viewpoint of white player)
    public enum MoveDirection { East, South, West, North; }
}
